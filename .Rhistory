na.action = na.fail
)
data_small<- data%>% select(-c(X,id, is_location_exact, calendar_updated, latitude, longitude, square_feet))
data_small <- revalue(data_small, c("N/A"=" "))
data_small<- data%>% select(-c(X,id, is_location_exact, calendar_updated, latitude, longitude, square_feet))
data_small <- revalue(data_small, c("N/A"=" "))
data_small<- data%>% select(-c(X,id, is_location_exact, calendar_updated, latitude, longitude, square_feet))
data_small <- replace(as.character(data_small), data_small == "N/A", " ")
sum(complete.cases(data_small))
View(data_complete)
data_small<- data%>% select(-c(X,id, is_location_exact, calendar_updated, latitude, longitude, square_feet))
data_small <- replace(as.character(data_small), data_small == "N/A", " ")
sum(complete.cases(data_small))
data_small<- data%>% select(-c(X,id, is_location_exact, calendar_updated, latitude, longitude, square_feet))
data_small$host_response_time[data_small$host_response_time == "N/A"] <- " "
sum(complete.cases(data_small))
data_small<- data%>% select(-c(X,id, is_location_exact, calendar_updated, latitude, longitude, square_feet))
data_small$host_response_time[data_small$host_response_time == "N/A"] <- " "
sum(complete.cases(data_small))
View(data_small)
data_small<- data%>% select(-c(X,id, is_location_exact, calendar_updated, latitude, longitude, square_feet))
data_small$host_response_time[data_small$host_response_time == "N/A"] <- " "
data_small$host_response_rate[data_small$host_response_time == "N/A"] <- " "
sum(complete.cases(data_small))
impute_info <- data_small %>%
preProcess(method = "knnImpute")
data_complete <- predict(impute_info, newdata = data_small)
colSums(is.na(data_complete))
sum(complete.cases(data_complete))
# Define a range of lambda tuning parameters to try
lambda_grid <- 10^seq(-3, 0.5, length = 100)
# Set the seed
set.seed(253)
# Perform LASSO
lasso_model_data <- train(
price~.,
data = data_complete,
method = "glmnet",
trControl = trainControl(method = "cv", number = 10, selectionFunction = "best"),
tuneGrid = data.frame(alpha=1, lambda=lambda_grid),
metric = "MAE",
na.action = na.omit
)
library(ggplot2)  # for plots
library(dplyr)    # for wrangling
library(caret)    # for machine learning algorithms
data<- read.csv("airbnb_joined.csv")
set.seed(256)
data<-data%>%
sample_n(5000)
data
data<- data %>% filter(price<1000)
View(data)
names(data)
View(data)
sum(complete.cases(data_small))
colSums(is.na(data_small))
data_small<- data%>% select(-c(X,id, is_location_exact, calendar_updated, latitude, longitude, square_feet))
data_small$host_response_time[data_small$host_response_time == "N/A"] <- " "
data_small$host_response_rate[data_small$host_response_time == "N/A"] <- " "
sum(complete.cases(data_small))
impute_info <- data_small %>%
preProcess(method = "knnImpute")
data_complete <- predict(impute_info, newdata = data_small)
colSums(is.na(data_complete))
sum(complete.cases(data_complete))
colSums(is.na(data_complete))
sum(complete.cases(data_complete))
data_small<- data%>% select(-c(X,id, is_location_exact, calendar_updated, latitude, longitude, square_feet))
data_small$host_response_time[data_small$host_response_time == "N/A"] <- " "
data_small$host_response_rate[data_small$host_response_time == "N/A"] <- " "
sum(complete.cases(data_small))
data_small<- data%>% select(-c(X,id, is_location_exact, calendar_updated, latitude, longitude, square_feet))
data_small$host_response_time[data_small$host_response_time == "N/A"] <- " "
data_small$host_response_rate[data_small$host_response_time == "N/A"] <- " "
sum(complete.cases(data_small))
data_small<- data%>% select(-c(X,id, is_location_exact, calendar_updated, latitude, longitude, square_feet))
data_small$host_response_time[data_small$host_response_time == "N/A"] <- " "
sum(complete.cases(data_small))
data_small$host_response_rate[data_small$host_response_time == "N/A"] <- " "
data_small<- data%>% select(-c(X,id, is_location_exact, calendar_updated, latitude, longitude, square_feet))
library(ggplot2)  # for plots
library(dplyr)    # for wrangling
library(caret)    # for machine learning algorithms
data<- read.csv("airbnb_joined.csv")
set.seed(256)
data<-data%>%
sample_n(5000)
data
data<- data %>% filter(price<1000)
View(data)
names(data)
View(data)
sum(complete.cases(data_small))
colSums(is.na(data_small))
data_small<- data%>% select(-c(X,id, is_location_exact, calendar_updated, latitude, longitude, square_feet))
data_small$host_response_time[data_small$host_response_time == "N/A"] <- " "
data_small$host_response_rate[data_small$host_response_time == "N/A"] <- " "
View(data_complete)
typeof(data_small$host_response_rate)
data_complete %>%
sum(complete.cases(data_small))
names(data)
View(data)
sum(complete.cases(data_small))
colSums(is.na(data_small))
data_small<- data%>% select(-c(X,id, is_location_exact, calendar_updated, latitude, longitude, square_feet))
data_small$host_response_time[data_small$host_response_time == "N/A"] <- " "
data_small<- data%>% select(-c(X,id, is_location_exact, calendar_updated, latitude, longitude, square_feet))
data_small$host_response_time[data_small$host_response_time == "N/A"] <- " "
data_small<- data%>% select(-c(X,id, is_location_exact, calendar_updated, latitude, longitude, square_feet))
data_small$host_response_time[data_small$host_response_time == "N/A"] <- " "
data_small$host_response_rate[data_small$host_response_time == "N/A"] <- " "
data_small<- data%>% select(-c(X,id, is_location_exact, calendar_updated, latitude, longitude, square_feet))
data_small$host_response_time[data_small$host_response_time == "N/A"] <- " "
data_small$host_response_rate[data_small$host_response_time == "N/A"] <- " "
View(data_small)
data_small$host_response_rate[data_small$host_response_time == N/A] <- " "
data_small$host_response_rate[data_small$host_response_time == N/A] <- " "
data_small$host_response_rate[data_small$host_response_time == N/A] <- " "
data_small<- data%>% select(-c(X,id, is_location_exact, calendar_updated, latitude, longitude, square_feet))
data_small$host_response_time[data_small$host_response_time == "N/A"] <- " "
as.character(data_small$host_response_rate)
data_small$host_response_rate[data_small$host_response_time == N/A] <- " "
data_small$host_response_rate[data_small$host_response_time == N/A] <- " "
data_small$host_response_rate[data_small$host_response_time == "N/A"] <- " "
data_small<- data%>% select(-c(X,id, is_location_exact, calendar_updated, latitude, longitude, square_feet))
data_small$host_response_time[data_small$host_response_time == "N/A"] <- " "
data_small%>%
as.character(data_small$host_response_rate)
data_small<- data%>% select(-c(X,id, is_location_exact, calendar_updated, latitude, longitude, square_feet))
data_small$host_response_time[data_small$host_response_time == "N/A"] <- " "
data_small%>%
as.numeric(data_small$host_response_rate)
data_small<- data%>% select(-c(X,id, is_location_exact, calendar_updated, latitude, longitude, square_feet))
data_small$host_response_time[data_small$host_response_time == "N/A"] <- " "
data_small<-
as.character(data_small$host_response_rate)
data_small$host_response_rate[data_small$host_response_time == "N/A"] <- " "
data_small$host_response_rate[data_small$host_response_time == "N/A"] <- " "
data_small$host_response_rate[data_small$host_response_time == "N/A"] <- " "
data_small$host_response_rate[data_small$host_response_time == N/A] <- " "
library(ggplot2)  # for plots
library(dplyr)    # for wrangling
library(caret)    # for machine learning algorithms
data<- read.csv("airbnb_joined.csv")
set.seed(256)
data<-data%>%
sample_n(5000)
data
data<- data %>% filter(price<1000)
View(data)
names(data)
View(data)
sum(complete.cases(data_small))
colSums(is.na(data_small))
sum(complete.cases(data_small))
colSums(is.na(data_small))
sum(complete.cases(data_small))
colSums(is.na(data_small))
data_small<- data%>% select(-c(X,id, is_location_exact, calendar_updated, latitude, longitude, square_feet))
data_small$host_response_time[data_small$host_response_time == "N/A"] <- " "
data_small%>%
as.character(data_small$host_response_rate)
data_small<- data%>% select(-c(X,id, is_location_exact, calendar_updated, latitude, longitude, square_feet))
data_small<- data%>% select(-c(X,id, is_location_exact, calendar_updated, latitude, longitude, square_feet))
data_complete$host_response_time <- gsub("N/A", "NA" ,data_complete$host_response_time)
data_complete
data_small<- data%>% select(-c(X,id, is_location_exact, calendar_updated, latitude, longitude, square_feet))
data_complete$host_response_time <- gsub("N/A", "NA" ,data_complete$host_response_time)
data_complete
View(data_complete)
View(data_complete)
data_small<- data%>% select(-c(X,id, is_location_exact, calendar_updated, latitude, longitude, square_feet))
data_complete$host_response_time <- gsub("N/A", "NA" ,data_complete$host_response_time)
data_complete$host_response_rate <- gsub("N/A", "NA" ,data_complete$host_response_rate)
data_complete
data_small<- data%>% select(-c(X,id, is_location_exact, calendar_updated, latitude, longitude, square_feet))
data_complete$host_response_time <- gsub("N/A", " " ,data_complete$host_response_time)
data_complete$host_response_rate <- gsub("N/A", " " ,data_complete$host_response_rate)
data_complete
View(data_complete)
data_small<- data%>% select(-c(X,id, is_location_exact, calendar_updated, latitude, longitude, square_feet))
data_complete$host_response_time <- gsub("N/A", " " ,data_complete$host_response_time)
data_complete$host_response_rate <- gsub("N/A", " " ,data_complete$host_response_rate)
data_complete
data_small<- data%>% select(-c(X,id, is_location_exact, calendar_updated, latitude, longitude, square_feet))
data_small_host_response_time[data_small_host_response_time == 'N/A'] <- ' '
data_small<- data%>% select(-c(X,id, is_location_exact, calendar_updated, latitude, longitude, square_feet))
data_small_host_response_time[data_small_host_response_time == 'N/A'] <- ' '
data_small<- data%>% select(-c(X,id, is_location_exact, calendar_updated, latitude, longitude, square_feet))
data_small$host_response_time[data_small$host_response_time == 'N/A'] <- ' '
data_small<- data%>% select(-c(X,id, is_location_exact, calendar_updated, latitude, longitude, square_feet))
data_small$host_response_time[data_small$host_response_time == 'N/A'] <- ' '
data_small$host_response_rate[data_small$host_response_rate == 'N/A'] <- ' '
impute_info <- data_small %>%
preProcess(method = "knnImpute")
data_complete <- predict(impute_info, newdata = data_small)
colSums(is.na(data_complete))
sum(complete.cases(data_complete))
colSums(is.na(data_complete))
sum(complete.cases(data_complete))
impute_info <- data_small %>%
preProcess(method = "knnImpute")
data_complete <- predict(impute_info, newdata = data_small)
colSums(is.na(data_complete))
sum(complete.cases(data_complete))
colSums(is.na(data_complete))
sum(complete.cases(data_complete))
impute_info <- data_small %>%
preProcess(method = "knnImpute")
data_complete <- predict(impute_info, newdata = data_small)
colSums(is.na(data_complete))
sum(complete.cases(data_complete))
colSums(is.na(data_complete))
sum(complete.cases(data_complete))
colSums(is.na(data_complete))
sum(complete.cases(data_complete))
names(data)
View(data)
na_strings <- c("NA", "N A", "N / A", "N/A", "N/ A", "Not Available", "NOt available")
data2<-
data2%>%
replace_with_na_all(condition = ~.x %in% na_strings)
names(data)
View(data)
na_strings <- c("NA", "N A", "N / A", "N/A", "N/ A", "Not Available", "NOt available")
data2<-
data2%>%
replace_with_na_all(condition = ~.x %in% na_strings)
names(data)
View(data)
na_strings <- c("NA", "N A", "N / A", "N/A", "N/ A", "Not Available", "NOt available")
library(naniar)
install.packages("naniar")
library("naniar", lib.loc="~/R/win-library/3.6")
names(data)
View(data)
na_strings <- c("NA", "N A", "N / A", "N/A", "N/ A", "Not Available", "NOt available")
library(naniar)
data<-
data%>%
replace_with_na_all(condition = ~.x %in% na_strings)
data_small<- data%>% select(-c(X,id, is_location_exact, calendar_updated, latitude, longitude, square_feet))
impute_info <- data_small %>%
preProcess(method = "knnImpute")
data_complete <- predict(impute_info, newdata = data_small)
colSums(is.na(data_complete))
sum(complete.cases(data_complete))
# Define a range of lambda tuning parameters to try
lambda_grid <- 10^seq(-3, 0.5, length = 100)
# Set the seed
set.seed(253)
# Perform LASSO
lasso_model_data <- train(
price~.,
data = data_complete,
method = "glmnet",
trControl = trainControl(method = "cv", number = 10, selectionFunction = "best"),
tuneGrid = data.frame(alpha=1, lambda=lambda_grid),
metric = "MAE",
na.action = na.omit
)
# Plot coefficients for each LASSO
plot(lasso_model_data$finalModel, xvar = "lambda", label = TRUE, col = rainbow(20))
# Codebook for which variables the numbers correspond to
rownames(lasso_model_data$finalModel$beta)
# Plot metrics for each LASSO model
plot(lasso_model_data)
# Identify which tuning parameter (ie. lambda) is "best"
lasso_model_data$bestTune
lasso_model_data$resample%>%
summarize(mean(MAE))
lasso_model_data$results
colSums(is.na(data))
knitr::opts_chunk$set(echo = TRUE, error=TRUE)
library(dplyr)
library(lubridate)
library(stringr)
library(ggplot2)
SP500 <- read.csv('SP500_daily.csv')
SP500 <- SP500 %>%
mutate(Date = as.Date(Date)) %>%
mutate(Month = month(Date), Year = year(Date), Day = day(Date))
SP500 <- SP500 %>% select('Date', 'Year', 'Month', 'Day', 'Adj.Close')
SP500 <- read.csv('SP500_daily.csv')
SP500 <- SP500 %>%
mutate(Date = as.Date(Date)) %>%
mutate(Month = month(Date), Year = year(Date), Day = day(Date))
SP500 <- SP500 %>% select('Date', 'Year', 'Month', 'Day', 'Adj.Close')
knitr::opts_chunk$set(echo = TRUE, error=TRUE)
library(dplyr)
library(lubridate)
library(stringr)
library(ggplot2)
library(splines)
SP500 <- read.csv('SP500_daily.csv')
SP500 <- SP500 %>%
mutate(Date = as.Date(Date)) %>%
mutate(Month = month(Date), Year = year(Date), Day = day(Date))
SP500 <- SP500 %>% select('Date', 'Year', 'Month', 'Day', 'Adj.Close')
SP500 <- read.csv('SP500_daily.csv')
SP500 <- SP500 %>%
mutate(Date = as.Date(Date)) %>%
mutate(Month = month(Date), Year = year(Date), Day = day(Date))
SP500 <- SP500 %>% select('Date', 'Year', 'Month', 'Day', 'Adj.Close')
SP500 <- read.csv('SP500_daily.csv')
SP500 <- SP500 %>%
mutate(Date = as.Date(Date)) %>%
mutate(Month = month(Date), Year = year(Date), Day = day(Date))
SP500 <- SP500 %>% select('Date', 'Year', 'Month', 'Day', 'Adj.Close')
SP500 <- read.csv('SP500_daily.csv')
SP500 <- SP500 %>%
mutate(Date = as.Date(Date)) %>%
mutate(Month = month(Date), Year = year(Date), Day = day(Date))
SP500 <- SP500 %>% select('Date', 'Year', 'Month', 'Day', 'Adj.Close')
SP500 <- SP500 %>%
mutate(Date = as.Date(Date)) %>%
mutate(Month = month(Date), Year = year(Date), Day = day(Date))
SP500 <- SP500 %>% select('Date', 'Year', 'Month', 'Day', 'Adj.Close')
View(SP500)
knitr::opts_chunk$set(echo = TRUE, error=TRUE)
library(dplyr)
library(lubridate)
library(stringr)
library(ggplot2)
library(ggplot2)  # for plots
library(dplyr)    # for wrangling
library(caret)    # for machine learning algorithms
names(data)
View(data)
na_strings <- c("NA", "N A", "N / A", "N/A", "N/ A", "Not Available", "NOt available")
library(naniar)
data<-
data%>%
replace_with_na_all(condition = ~.x %in% na_strings)
names(data)
View(data)
na_strings <- c("NA", "N A", "N / A", "N/A", "N/ A", "Not Available", "NOt available")
library(naniar)
data<-data%>%
replace_with_na_all(condition = ~.x %in% na_strings)
library(ggplot2)  # for plots
library(dplyr)    # for wrangling
library(caret)    # for machine learning algorithms
data<- read.csv("airbnb_joined.csv")
set.seed(256)
data<-data%>%
sample_n(5000)
data
data<- data %>% filter(price<1000)
View(data)
names(data)
View(data)
na_strings <- c("NA", "N A", "N / A", "N/A", "N/ A", "Not Available", "NOt available")
library(naniar)
data<-data%>%
replace_with_na_all(condition = ~.x %in% na_strings)
data <- data %>%
mutate(bathrooms2 = replace_na(bathrooms, mean(bathrooms, na.rm = TRUE)))%>%
mutate(beds2 = replace_na(beds, mean(beds, na.rm = TRUE)))%>%
mutate(reviews2 = replace_na(reviews_per_month, mean(reviews_per_month, na.rm = TRUE)))%>%
mutate(host_response_rate2 = replace_na(host_response_rate, mean(host_response_rate, na.rm = TRUE)))
names(data)
View(data)
na_strings <- c("NA", "N A", "N / A", "N/A", "N/ A", "Not Available", "NOt available")
library(naniar)
data<-data%>%
replace_with_na_all(condition = ~.x %in% na_strings)
data <- data %>%
mutate(bathrooms2 = replace_na(bathrooms, mean(bathrooms, na.rm = TRUE)))%>%
mutate(beds2 = replace_na(beds, mean(beds, na.rm = TRUE)))%>%
mutate(reviews2 = replace_na(reviews_per_month, mean(reviews_per_month, na.rm = TRUE)))%>%
mutate(host_response_rate2 = replace_na(host_response_rate, mean(host_response_rate, na.rm = TRUE)))
library(ggplot2)  # for plots
library(dplyr)    # for wrangling
library(caret)    # for machine learning algorithms
names(data)
View(data)
na_strings <- c("NA", "N A", "N / A", "N/A", "N/ A", "Not Available", "NOt available")
library(naniar)
data<-data%>%
replace_with_na_all(condition = ~.x %in% na_strings)
data <- data %>%
mutate(bathrooms2 = replace_na(bathrooms, mean(bathrooms, na.rm = TRUE)))%>%
mutate(beds2 = replace_na(beds, mean(beds, na.rm = TRUE)))%>%
mutate(reviews2 = replace_na(reviews_per_month, mean(reviews_per_month, na.rm = TRUE)))%>%
mutate(host_response_rate2 = replace_na(host_response_rate, mean(host_response_rate, na.rm = TRUE)))
library(ggplot2)  # for plots
library(dplyr)    # for wrangling
library(caret)    # for machine learning algorithms
data<- read.csv("airbnb_joined.csv")
set.seed(256)
data<-data%>%
sample_n(5000)
data
data<- data %>% filter(price<1000)
View(data)
set.seed(256)
data<-data%>%
sample_n(5000)
set.seed(256)
data<-data%>%
sample_n(5000)
set.seed(256)
data<-data%>%
sample_n(5000)
library(ggplot2)  # for plots
library(dplyr)    # for wrangling
library(caret)    # for machine learning algorithms
data<- read.csv("airbnb_joined.csv")
set.seed(256)
data<-data%>%
sample_n(5000)
data
data<- data %>% filter(price<1000)
View(data)
names(data)
View(data)
data <- data %>%
mutate(bathrooms2 = replace_na(bathrooms, mean(bathrooms, na.rm = TRUE)))%>%
mutate(beds2 = replace_na(beds, mean(beds, na.rm = TRUE)))%>%
mutate(reviews2 = replace_na(reviews_per_month, mean(reviews_per_month, na.rm = TRUE)))%>%
mutate(host_response_rate2 = replace_na(host_response_rate, mean(host_response_rate, na.rm = TRUE)))
names(data)
View(data)
library(dplyr)
data <- data %>%
mutate(bathrooms2 = replace_na(bathrooms, mean(bathrooms, na.rm = TRUE)))%>%
mutate(beds2 = replace_na(beds, mean(beds, na.rm = TRUE)))%>%
mutate(reviews2 = replace_na(reviews_per_month, mean(reviews_per_month, na.rm = TRUE)))%>%
mutate(host_response_rate2 = replace_na(host_response_rate, mean(host_response_rate, na.rm = TRUE)))
names(data)
View(data)
library(dplyr)
data <- data %>%
mutate(bathrooms2 = replace_na(bathrooms, mean(bathrooms, na.rm = TRUE)))%>%
mutate(beds2 = replace_na(beds, mean(beds, na.rm = TRUE)))%>%
mutate(reviews2 = replace_na(reviews_per_month, mean(reviews_per_month, na.rm = TRUE)))%>%
mutate(host_response_rate2 = replace_na(host_response_rate, mean(host_response_rate, na.rm = TRUE)))
names(data)
library(dplyr)
data <- data %>%
mutate(bathrooms2 = replace_na(bathrooms, mean(bathrooms, na.rm = TRUE)))%>%
mutate(beds2 = replace_na(beds, mean(beds, na.rm = TRUE)))%>%
mutate(reviews2 = replace_na(reviews_per_month, mean(reviews_per_month, na.rm = TRUE)))%>%
mutate(host_response_rate2 = replace_na(host_response_rate, mean(host_response_rate, na.rm = TRUE)))
names(data)
library(dplyr)
data <- data %>%
mutate(bathrooms2 = replace_na(bathrooms, mean(bathrooms, na.rm = TRUE)))%>%
mutate(beds2 = replace_na(beds, mean(beds, na.rm = TRUE)))%>%
mutate(reviews2 = replace_na(reviews_per_month, mean(reviews_per_month, na.rm = TRUE)))%>%
mutate(host_response_rate2 = replace_na(host_response_rate, mean(host_response_rate, na.rm = TRUE)))
names(data)
library(dplyr)
data <- data %>%
mutate(bathrooms2 = replace_na(bathrooms, mean(bathrooms, na.rm = TRUE)))%>%
mutate(beds2 = replace_na(beds, mean(beds, na.rm = TRUE)))%>%
mutate(reviews2 = replace_na(reviews_per_month, mean(reviews_per_month, na.rm = TRUE)))%>%
mutate(host_response_rate2 = replace_na(host_response_rate, mean(host_response_rate, na.rm = TRUE)))
library("tidyr", lib.loc="~/R/win-library/3.6")
names(data)
library(dplyr)
data <- data %>%
mutate(bathrooms2 = replace_na(bathrooms, mean(bathrooms, na.rm = TRUE)))%>%
mutate(beds2 = replace_na(beds, mean(beds, na.rm = TRUE)))%>%
mutate(reviews2 = replace_na(reviews_per_month, mean(reviews_per_month, na.rm = TRUE)))%>%
mutate(host_response_rate2 = replace_na(host_response_rate, mean(host_response_rate, na.rm = TRUE)))
names(data)
library(dplyr)
data <- data %>%
mutate(bathrooms2 = replace_na(bathrooms, mean(bathrooms, na.rm = TRUE)))%>%
mutate(beds2 = replace_na(beds, mean(beds, na.rm = TRUE)))%>%
mutate(reviews2 = replace_na(reviews_per_month, mean(reviews_per_month, na.rm = TRUE)))%>%
mutate(host_response_rate2 = replace_na(host_response_rate, mean(host_response_rate, na.rm = TRUE)))
names(data)
library(dplyr)
data <- data %>%
mutate(bathrooms2 = replace_na(bathrooms, mean(bathrooms, na.rm = TRUE)))%>%
mutate(beds2 = replace_na(beds, mean(beds, na.rm = TRUE)))%>%
mutate(reviews2 = replace_na(reviews_per_month, mean(reviews_per_month, na.rm = TRUE)))%>%
mutate(host_response_rate2 = replace_na(host_response_rate, mean(host_response_rate, na.rm = TRUE)))
colSums(is.na(data))
data_small<- data%>% select(-c(X,id, is_location_exact, calendar_updated, latitude, longitude, square_feet))
impute_info <- data_small %>%
preProcess(method = "knnImpute")
data_complete <- predict(impute_info, newdata = data_small)
colSums(is.na(data_complete))
sum(complete.cases(data_complete))
# Define a range of lambda tuning parameters to try
lambda_grid <- 10^seq(-3, 0.5, length = 100)
# Set the seed
set.seed(253)
# Perform LASSO
lasso_model_data <- train(
price~.,
data = data_complete,
method = "glmnet",
trControl = trainControl(method = "cv", number = 10, selectionFunction = "best"),
tuneGrid = data.frame(alpha=1, lambda=lambda_grid),
metric = "MAE",
na.action = na.omit
)
View(data_complete)
View(data_complete)
# Define a range of lambda tuning parameters to try
lambda_grid <- 10^seq(-3, 0.5, length = 100)
# Set the seed
set.seed(253)
# Perform LASSO
lasso_model_data <- train(
